#include <stdio.h>

void strassen(int n, int A[][n], int B[][n], int C[][n])
{
    if (n == 1)
    {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int i, j, k;
    int half = n / 2;

    int A11[half][half], A12[half][half], A21[half][half], A22[half][half];
    int B11[half][half], B12[half][half], B21[half][half], B22[half][half];
    int C11[half][half], C12[half][half], C21[half][half], C22[half][half];
    int P1[half][half], P2[half][half], P3[half][half], P4[half][half], P5[half][half], P6[half][half], P7[half][half];
    int temp1[half][half], temp2[half][half];

    // Splitting input matrices into submatrices
    for (i = 0; i < half; i++)
    {
        for (j = 0; j < half; j++)
        {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + half];
            A21[i][j] = A[i + half][j];
            A22[i][j] = A[i + half][j + half];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + half];
            B21[i][j] = B[i + half][j];
            B22[i][j] = B[i + half][j + half];
        }
    }

    // Computing the seven products required for Strassen's algorithm
    strassen(half, A11, B11, P1);
    strassen(half, A12, B21, P2);
    strassen(half, A11, B12, P3);
    strassen(half, A12, B22, P4);
    strassen(half, A21, B11, P5);
    strassen(half, A22, B21, P6);
    strassen(half, A21, B12, P7);
    
    // Computing the submatrices of the output matrix
    for (i = 0; i < half; i++)
    {
        for (j = 0; j < half; j++)
        {
            temp1[i][j] = P1[i][j] + P2[i][j];
            temp2[i][j] = P3[i][j] + P4[i][j];
            C11[i][j] = temp1[i][j] + temp2[i][j] - P7[i][j];

            temp1[i][j] = P5[i][j] + P6[i][j];
            temp2[i][j] = P1[i][j] + P4[i][j];
            C12[i][j] = temp1[i][j] - temp2[i][j] + P3[i][j];

            temp1[i][j] = P2[i][j] + P4[i][j];
            temp2[i][j] = P6[i][j] - P5[i][
