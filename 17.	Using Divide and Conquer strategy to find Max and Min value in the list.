#include <stdio.h>

struct Pair {
    int max;
    int min;
};

struct Pair getMinMax(int arr[], int low, int high) {
    struct Pair minmax, left, right;
    int mid;

    // Base case: when there is only one element
    if (low == high) {
        minmax.max = arr[low];
        minmax.min = arr[low];
        return minmax;
    }

    // Base case: when there are only two elements
    if (high == low + 1) {
        if (arr[low] > arr[high]) {
            minmax.max = arr[low];
            minmax.min = arr[high];
        } else {
            minmax.max = arr[high];
            minmax.min = arr[low];
        }
        return minmax;
    }

    // Recursive case: divide the array in half and find max and min values in each half
    mid = (low + high) / 2;
    left = getMinMax(arr, low, mid);
    right = getMinMax(arr, mid+1, high);

    // Compare the max and min values in the left and right halves
    if (left.max > right.max) {
        minmax.max = left.max;
    } else {
        minmax.max = right.max;
    }

    if (left.min < right.min) {
        minmax.min = left.min;
    } else {
        minmax.min = right.min;
    }

    return minmax;
}

int main() {
    int arr[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
    int n = sizeof(arr) / sizeof(arr[0]);

    struct Pair minmax = getMinMax(arr, 0, n-1);

    printf("The maximum value in the array is %d\n", minmax.max);
    printf("The minimum value in the array is %d\n", minmax.min);

    return 0;
}
